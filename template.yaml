AWSTemplateFormatVersion: '2010-09-09'
Description: Order Notification System v2 (All New Resources)

Resources:
  # 1. New DynamoDB Table
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Orders-v2  
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # 2. New SNS Topic
  OrderTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: OrderTopic-v2  

  # 3. New SQS DLQ
  OrderQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderQueueDLQ-v2  

  # 4. New Main SQS Queue
  OrderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderQueue-v2  
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt OrderQueueDLQ.Arn
        maxReceiveCount: 3

  # 5. New SNS Subscription
  OrderTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt OrderQueue.Arn
      TopicArn: !Ref OrderTopic

  # 6. New Lambda Function
  ProcessOrderLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ProcessOrder-v2  
      Runtime: python3.9
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('Orders-v2')  # Updated table name
          def lambda_handler(event, context):
              for record in event['Records']:
                  message = json.loads(record['body'])
                  if 'Message' in message:
                      message = json.loads(message['Message'])
                  message['quantity'] = int(message['quantity'])
                  table.put_item(Item=message)
              return {'statusCode': 200}
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 10
      Environment:
        Variables:
          TABLE_NAME: !Ref OrdersTable

  # 7. New Lambda Trigger
  LambdaSQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt OrderQueue.Arn
      FunctionName: !GetAtt ProcessOrderLambda.Arn
      BatchSize: 1

  # 8. New IAM Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:DescribeTable
                Resource: !GetAtt OrdersTable.Arn
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt OrderQueue.Arn
        - PolicyName: BasicLambdaLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

Outputs:
  OrderTopicARN:
    Value: !Ref OrderTopic
  OrderQueueURL:
    Value: !Ref OrderQueue